<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Course - 分类 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/categories/course/</link>
        <description>Course - 分类 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/categories/course/" rel="self" type="application/rss+xml" /><item>
    <title>CS61A 的项目四之 Scheme 解释器实现 (2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</link>
    <pubDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</guid>
    <description><![CDATA[引言最近正在跟着《Crafting interpreter》这本书写解释器，原本书里面用 Java 实现了一个 Tree-walker 解释器 jlox，我正在用 Python 重写一遍，称为]]></description>
</item><item>
    <title>CS61A 的项目三之 Ants vs SomeBees 实现 (2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/proj3.ants-vs-somebees-of-cs61a-of-ucb/</link>
    <pubDate>Thu, 10 Mar 2022 21:43:59 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/proj3.ants-vs-somebees-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Intro 前两个项目还算简单, 比较不复杂. 但是今天这个第三个项目难度确实是上升了(看游戏规则就知道这个有多复杂了). 感觉像是植物大战僵尸 所以我打算为]]></description>
</item><item>
    <title>Lab14 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab14-cs61a-of-ucb/</link>
    <pubDate>Thu, 03 Mar 2022 08:17:14 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/lab14-cs61a-of-ucb/</guid>
    <description><![CDATA[Trees Q1: Prune Min Write a function that prunes a Tree t mutatively. t and its branches always have zero or two branches. For the trees with two branches, reduce the number of branches from two to one by keeping the branch that has the smaller label value. Do nothing with trees with zero branches. Prune the tree in a direction of your choosing (top down or bottom up). The]]></description>
</item><item>
    <title>Hw10 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw10-of-cs61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 13:36:13 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/hw10-of-cs61a-of-ucb/</guid>
    <description><![CDATA[BNF Q1: Grouping and Pipes In this question, you will add support for grouping and piping. Recall that grouping allows for an entire regular expression to be treated as a single unit, and piping allows for a pattern to match an expression on either side. Combined, these will let us create patterns which match multiple strings! Define the group and pipe expressions in your grammar. A group consists of any]]></description>
</item><item>
    <title>Lab12 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab12-ca61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 11:15:08 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/lab12-ca61a-of-ucb/</guid>
    <description><![CDATA[Regular Expressions Q1: Calculator Ops Write a regular expression that parses strings written in the 61A Calculator language and returns any expressions which have two numeric operands, leaving out the parentheses around them. 写一个符合 (operand operator1 operator2) 格式的正则表达式. 这个是比较简单的, 因为这里的运算符只有 +,]]></description>
</item><item>
    <title>Hw09 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw09-of-cs61a-of-ucb/</link>
    <pubDate>Tue, 01 Mar 2022 21:13:22 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/hw09-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q2: Roman Numerals Write a regular expression that finds any string of letters that resemble a Roman numeral and aren&rsquo;t part of another word. A Roman numeral is made up of the letters I, V, X, L, C, D, M and is at least one letter long. For the purposes of this problem, don&rsquo;t worry about whether or not a Roman numeral is valid. For example, &ldquo;VIIIII&rdquo; is not a]]></description>
</item><item>
    <title>Lab11 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab11-cs61a-of-ucb/</link>
    <pubDate>Tue, 01 Mar 2022 00:41:21 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/lab11-cs61a-of-ucb/</guid>
    <description><![CDATA[Context Problem 1 Important: Your code for this part should go in buffer.py. Your job in this part is to implement the current and pop_first methods of the Buffer class. current should return the current token of the current line we&rsquo;re on in the Buffer instance without removing it. If there are no more tokens in the current line, then current should move onto the next valid line, and return]]></description>
</item><item>
    <title>Hw08 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw08-of-cs61a-of-ucb/</link>
    <pubDate>Mon, 28 Feb 2022 00:28:31 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/hw08-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q1: My Filter Write a procedure my-filter, which takes a predicate func and a list lst, and returns a new list containing only elements of the list that satisfy the predicate. The output should contain the elements in the same order that they appeared in the original list. Note: Make sure that you are not just calling the built-in filter function in Scheme - we are asking you to re-implement]]></description>
</item><item>
    <title>Hw06 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw06-of-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 13:17:39 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/hw06-of-cs61a-of-ucb/</guid>
    <description><![CDATA[OOP Q1: Vending Machine In this question you&rsquo;ll create a vending machine that only outputs a single product and provides change when needed. Create a class called VendingMachine that represents a vending machine for some product. A VendingMachineobject returns strings describing its interactions. Remember to match exactly the strings in the doctests &ndash; including punctuation and spacing! Fill in the VendingMachine class, adding attributes and methods as appropriate, such that]]></description>
</item><item>
    <title>Lab10 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab10-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 01:04:02 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/lab10-cs61a-of-ucb/</guid>
    <description><![CDATA[Q2: Over or Under Define a procedure over-or-under which takes in a number num1 and a number num2 and returns the following: -1 if num1 is less than num2 0 if num1 is equal to num2 1 if num1 is greater than num2 Challenge: Implement this in 2 different ways using if and cond! 1 2 3 (define (over-or-under num1 num2) &#39;YOUR-CODE-HERE ) 代码其实本身不]]></description>
</item></channel>
</rss>
