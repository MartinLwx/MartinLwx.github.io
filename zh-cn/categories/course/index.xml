<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Course - 分类 - MartinLwx&#39;s blog</title>
        <link>https://martinlwx.github.io/zh-cn/categories/course/</link>
        <description>Course - 分类 - MartinLwx&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><lastBuildDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/categories/course/" rel="self" type="application/rss+xml" /><item>
    <title>CS61A 的项目四之 Scheme 解释器实现 (2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</link>
    <pubDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</guid>
    <description><![CDATA[引言 最近正在跟着《Crafting interpreter》这本书写解释器，原本书里面用 Java 实现了一个 Tree-walker 解释器 jlox，我正在用 Python 重写一遍，称为]]></description>
</item>
<item>
    <title>CS61A 的项目三之 Ants vs SomeBees 实现 (2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/proj3.ants-vs-somebees-of-cs61a-of-ucb/</link>
    <pubDate>Thu, 10 Mar 2022 21:43:59 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/proj3.ants-vs-somebees-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Intro 前两个项目还算简单, 比较不复杂. 但是今天这个第三个项目难度确实是上升了(看游戏规则就知道这个有多复杂了). 感觉像是植物大战僵尸 所以我打算为]]></description>
</item>
<item>
    <title>Lab14 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab14-cs61a-of-ucb/</link>
    <pubDate>Thu, 03 Mar 2022 08:17:14 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/lab14-cs61a-of-ucb/</guid>
    <description><![CDATA[Trees Q1: Prune Min Write a function that prunes a Tree t mutatively. t and its branches always have zero or two branches. For the trees with two branches, reduce the number of branches from two to one by keeping the branch that has the smaller label value. Do nothing with trees with zero branches. Prune the tree in a direction of your choosing (top down or bottom up). The]]></description>
</item>
<item>
    <title>Hw10 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw10-of-cs61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 13:36:13 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/hw10-of-cs61a-of-ucb/</guid>
    <description><![CDATA[BNF Q1: Grouping and Pipes In this question, you will add support for grouping and piping. Recall that grouping allows for an entire regular expression to be treated as a single unit, and piping allows for a pattern to match an expression on either side. Combined, these will let us create patterns which match multiple strings! Define the group and pipe expressions in your grammar. A group consists of any]]></description>
</item>
<item>
    <title>Lab10 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab10-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 01:04:02 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/lab10-cs61a-of-ucb/</guid>
    <description><![CDATA[Q2: Over or Under Define a procedure over-or-under which takes in a number num1 and a number num2 and returns the following: -1 if num1 is less than num2 0 if num1 is equal to num2 1 if num1 is greater than num2 Challenge: Implement this in 2 different ways using if and cond! 1 2 3 (define (over-or-under num1 num2) &#39;YOUR-CODE-HERE ) 代码其实本身不]]></description>
</item>
<item>
    <title>Lab09 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab09-cs61a-of-ucb/</link>
    <pubDate>Sat, 26 Feb 2022 13:09:24 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/lab09-cs61a-of-ucb/</guid>
    <description><![CDATA[Recursion and Tree Recursion Q1: Subsequences A subsequence of a sequence S is a subset of elements from S, in the same order they appear in S. Consider the list [1, 2, 3]. Here are a few of it&rsquo;s subsequences [], [1, 3], [2], and [1, 2, 3]. Write a function that takes in a list and returns all possible subsequences of that list. The subsequences should be returned as]]></description>
</item>
<item>
    <title>Lab08 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/lab08-cs61a-of-ucb/</link>
    <pubDate>Thu, 24 Feb 2022 20:22:51 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/lab08-cs61a-of-ucb/</guid>
    <description><![CDATA[Q2: Convert Link Write a function convert_link that takes in a linked list and returns the sequence as a Python list. You may assume that the input list is shallow; that is none of the elements is another linked list. Try to find both an iterative and recursive solution for this problem! 迭代的算法很简单, 我们只要创建一个 result]]></description>
</item>
<item>
    <title>Hw05 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw05-of-cs61a-of-ucb/</link>
    <pubDate>Tue, 22 Feb 2022 23:03:22 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/hw05-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q1: Generate Permutations Given a sequence of unique elements, a permutation of the sequence is a list containing the elements of the sequence in some arbitrary order. For example, [2, 1, 3], [1, 3, 2], and [3, 2, 1] are some of the permutations of the sequence [1, 2, 3]. Implement gen_perms, a generator function that takes in a sequence seq and returns a generator that yields all permutations of]]></description>
</item>
<item>
    <title>Hw04 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/zh-cn/hw04-of-cs61a-of-ucb/</link>
    <pubDate>Sun, 20 Feb 2022 14:44:19 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/zh-cn/hw04-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Mobiles Q2: Weights Implement the planet data abstraction by completing the planet constructor and the size selector so that a planet is represented using a two-element list where the first element is the string 'planet' and the second element is its size. 从问题的描述中我们可以知道什么是 planet. 就是一个长度为 2 的 list, 内]]></description>
</item>
</channel>
</rss>
