<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithm - 分类 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/categories/algorithm/</link>
        <description>Algorithm - 分类 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Wed, 06 Sep 2023 23:13:52 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/categories/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>下一个排列问题</title>
    <link>https://martinlwx.github.io/zh-cn/the-next-lexicographical-permutation-problem/</link>
    <pubDate>Wed, 06 Sep 2023 23:13:52 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/the-next-lexicographical-permutation-problem/</guid>
    <description><![CDATA[引言有时候我们会想要生成一个序列的「下一个排列」或者是「上一个排列」，你会怎么做呢？如果你对 C++ 很熟悉的话，不难想到可以用 next_permutation1 和 prev_per]]></description>
</item><item>
    <title>用 SRTBOT 框架分析动态规划问题</title>
    <link>https://martinlwx.github.io/zh-cn/solving-dynamic-programming-problems-using-srtbot/</link>
    <pubDate>Sun, 09 Apr 2023 12:30:31 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/solving-dynamic-programming-problems-using-srtbot/</guid>
    <description><![CDATA[Changelog: 更新依赖图 @2023.04.13 引言在做算法题的时候，让我头疼的经常是动态规划问题，它属于那种自己琢磨半天想不出来，但是看了答案之后会恍然大悟，下次再做的话很]]></description>
</item><item>
    <title>摩尔投票法</title>
    <link>https://martinlwx.github.io/zh-cn/boyer-moore-majority-voting-algorithm-explained/</link>
    <pubDate>Thu, 24 Mar 2022 18:15:19 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/boyer-moore-majority-voting-algorithm-explained/</guid>
    <description><![CDATA[引言 今天又做到了 Leetcode 169. 多数元素 这一道题. 我依稀记得最优的解法叫做什么摩尔投票法. 但是我对它的印象竟然只有这个名字本身了 Orz. 对于这个算法本身倒是忘]]></description>
</item></channel>
</rss>
