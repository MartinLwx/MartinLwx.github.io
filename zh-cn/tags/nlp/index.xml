<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>NLP - 标签 - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/zh-cn/tags/nlp/</link>
        <description>NLP - 标签 - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Thu, 12 Oct 2023 16:38:18 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/zh-cn/tags/nlp/" rel="self" type="application/rss+xml" /><item>
    <title>LLM 推理加速 - KV Cache</title>
    <link>https://martinlwx.github.io/zh-cn/llm-inference-optimization-kv-cache/</link>
    <pubDate>Thu, 12 Oct 2023 16:38:18 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/llm-inference-optimization-kv-cache/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark" aria-label="Header mark for '背景'"></a>背景</h2><p>LLM 用于推理的时候就是不断基于前面的所有 token 生成下一个 token</p>
<p><em>假设现在已经生成了 $t$ 个 token，用 $x_{1:t}$ 表示。在下一轮，LLM 会生成 $x_{1:t+1}$，注意他们的前 $t$ 个 token 是一样的</em></p>]]></description>
</item><item>
    <title>BPE 分词解密 - 实现方法与示例讲解</title>
    <link>https://martinlwx.github.io/zh-cn/the-bpe-tokenizer/</link>
    <pubDate>Thu, 24 Aug 2023 22:06:37 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/the-bpe-tokenizer/</guid>
    <description><![CDATA[<h2 id="bpe-简介" class="headerLink">
    <a href="#bpe-%e7%ae%80%e4%bb%8b" class="header-mark" aria-label="Header mark for 'BPE 简介'"></a>BPE 简介</h2><p>在 NLP 里面，一个核心的问题是，如何对文本进行分词？从分类的角度上面来说，可以分为：</p>
<ul>
<li>Char level</li>
<li>Word level</li>
<li>Subword level</li>
</ul>
<p>先看 Char level 分词，顾名思义，就是把文本拆分成一个个字符单独表示，<em>比如 <code>highest -&gt; h, i, g, h, e, s, t</code></em>，一个显然的好处是，Vocab 不会太大，Vocab 的大小为字符集的大小，也不会遇到 Out-of-vocabulary(OOV) 的问题，但是<strong>字符本身并没有传达太多的语义</strong>，而且<strong>分词之后会有太多的 token</strong>，<em>光是一个 highest 就可以得到 7 个 token，难以想象很长的文本分出来会有多少个</em>😨</p>]]></description>
</item><item>
    <title>TF-IDF 模型</title>
    <link>https://martinlwx.github.io/zh-cn/an-introduction-of-tf-idf-model/</link>
    <pubDate>Wed, 16 Aug 2023 22:23:26 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/an-introduction-of-tf-idf-model/</guid>
    <description><![CDATA[<h2 id="什么是-tf-idf-模型" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-tf-idf-%e6%a8%a1%e5%9e%8b" class="header-mark" aria-label="Header mark for '什么是 TF-IDF 模型'"></a>什么是 TF-IDF 模型</h2><p>在之前的<a href="https://martinlwx.github.io/zh-cn/an-introduction-of-bag-of-word-model/" rel="">文章</a>中谈到了词袋模型，也讲到了它的许多不足，在今天的这篇文章中，我们要尝试解决词袋模型的<strong>缺点之一：每个词的重要性是一样的</strong></p>
<blockquote>
  <p>💡 那么，核心问题就是————<strong>如何定义「单词的重要性」这个概念</strong>？</p>

</blockquote><p>一个想法是：一个单词在<strong>一个文档</strong>里面出现得越频繁，则这个单词<strong>对于这个文档来说</strong>越重要。<em>比如一篇讨论狗的文章，大概率文章里面会出现很多「狗」，即词频高的单词反映了文档的主题</em></p>]]></description>
</item><item>
    <title>词袋模型</title>
    <link>https://martinlwx.github.io/zh-cn/an-introduction-of-bag-of-word-model/</link>
    <pubDate>Fri, 11 Aug 2023 18:55:09 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/zh-cn/an-introduction-of-bag-of-word-model/</guid>
    <description><![CDATA[<h2 id="什么是词袋模型" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e8%af%8d%e8%a2%8b%e6%a8%a1%e5%9e%8b" class="header-mark" aria-label="Header mark for '什么是词袋模型'"></a>什么是词袋模型</h2><p>在 NLP 中，我们需要将文档（document）表示为向量，这是因为机器学习只能够处理数字。也就是说，我们要找到下面这么一个<em>神奇</em>的函数：</p>]]></description>
</item></channel>
</rss>
