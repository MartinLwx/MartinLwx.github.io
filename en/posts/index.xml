<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - MartinLwx&#39;s blog</title>
        <link>https://martinlwx.github.io/en/posts/</link>
        <description>All Posts | MartinLwx&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><lastBuildDate>Wed, 15 Mar 2023 12:37:52 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Linear Regression Model Guide - theory part</title>
    <link>https://martinlwx.github.io/en/linear-regression-model-guide-theory/</link>
    <pubDate>Wed, 15 Mar 2023 12:37:52 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/linear-regression-model-guide-theory/</guid>
    <description><![CDATA[Introduction Recently, I review the machine learning course of Andrew ng in Coursera. Surprisingly, I can still learn a lot, so I decided to write some posts👍.
To talk about linear regression, we must first have a basic understanding of what is machine learning. What is machine learning? abstractly speaking, machine learning is learning a function: $$ f(input) = output $$ where $f$ refers to the specific machine learning model. Machine learning is a methodology for automatically mining the relationship between input and output.]]></description>
</item>
<item>
    <title>Transform Your Neovim into a IDE: A Step-by-Step Guide</title>
    <link>https://martinlwx.github.io/en/config-neovim-from-scratch/</link>
    <pubDate>Wed, 08 Feb 2023 15:01:42 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/config-neovim-from-scratch/</guid>
    <description><![CDATA[Versions info I use a Macbook pro-2020 Intel Edition with macOS 13.2. This is my Nvim edition:
1 2 3 4 5 6 7 8 9 10 11 12 NVIM v0.8.3 Build type: Release LuaJIT 2.1.0-beta3 Compiled by brew@Ventura Features: +acl +iconv +tui See &#34;:help feature-compile&#34; system vimrc file: &#34;$VIM/sysinit.vim&#34; fall-back for $VIM: &#34;/usr/local/Cellar/neovim/0.8.3/share/nvim&#34; Run :checkhealth for more info Why Neovim After using Vim for one year, I find myself having trouble in configure ~/.]]></description>
</item>
<item>
    <title>Type hints: what and why</title>
    <link>https://martinlwx.github.io/en/type-hints-in-python/</link>
    <pubDate>Fri, 13 Jan 2023 16:18:02 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/type-hints-in-python/</guid>
    <description><![CDATA[Intro I was immediately drawn to Python when I first encountered it due to its dynamic language features. Python use the &ldquo;duck typing&rdquo; design, which means that the type of an object is not as important as its behavior. This feature allows for faster development and a reduction in burdensome type declarations. Additionally, the support of powerful third-party libraries solidifies Python as my preferred programming language.😺
However, with the proposal of PEP 4841, Python decided to introduce type hints, which seem to be in line with statically typed languages.]]></description>
</item>
<item>
    <title>Unpacking in Python 3.5</title>
    <link>https://martinlwx.github.io/en/unpacking-in-python/</link>
    <pubDate>Mon, 05 Dec 2022 23:16:30 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/unpacking-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today I want to talk about the unpacking operators(* and **) in python.
Basic usage We use * for numeric data types to indicate we want to do multiplication. However, we can also apply * to iterable objects1, which means we want to unpack all the elements inside them.]]></description>
</item>
<item>
    <title>f-strings in Python 3.6</title>
    <link>https://martinlwx.github.io/en/f-strings-in-python/</link>
    <pubDate>Wed, 16 Nov 2022 22:15:03 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/f-strings-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro String formatting can be regarded as one of the most common activities in daily programming. We often need to output various strings and precisely control their format.
In some outdated Python tutorials, you may see the use of % to format strings. However, after Python 3.]]></description>
</item>
<item>
    <title>Walrus Operator in Python 3.8</title>
    <link>https://martinlwx.github.io/en/walrus-operator-in-python/</link>
    <pubDate>Sat, 29 Oct 2022 23:36:12 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/walrus-operator-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today I’m going to talk about a new feature introduced in Python 3.8: the Walrus operator（:=）, which is a much-debated feature, but it’s finally passed and released 🤔
In Python, an assignment statement (=) is not an expression but a statement. Walrus operator is expression though.]]></description>
</item>
<item>
    <title>Pattern Matching in Python 3.10</title>
    <link>https://martinlwx.github.io/en/pattern-matching-in-python/</link>
    <pubDate>Sun, 16 Oct 2022 15:14:57 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/pattern-matching-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today I want to talk about the new feature bring in Python 3.10 &ndash; Pattern matching 🎉
Those who have learned C language must be familiar with the following switch statement:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 switch (expression) { case constant_1: // statements break; case constant_2: // statements break; // Fall through // the value of the expression can be either constant_3 or constant_4 :) case constant_3: case constant_4: // statements default: // default statements } To recap, the syntax rules of the switch statement:]]></description>
</item>
<item>
    <title>What is stack and heap</title>
    <link>https://martinlwx.github.io/en/what-is-the-heap-and-stack/</link>
    <pubDate>Mon, 19 Sep 2022 19:01:04 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/what-is-the-heap-and-stack/</guid>
    <description><![CDATA[Intro If you&rsquo;ve been using dynamic languages like Python, Javascript, etc., you probably won&rsquo;t notice the difference between stack and heap. Because these languages have garbage collectors (GCs) that will automatically manage memory for you, you just need to program at a high level without considering the details. The bad news is that GC is not a cost-free design. No matter how well designed a GC algorithm is, the performance of the code will be degraded to some extent.]]></description>
</item>
<item>
    <title>Vim Macro 101</title>
    <link>https://martinlwx.github.io/en/vim-macro-101/</link>
    <pubDate>Sat, 02 Jul 2022 10:40:38 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/vim-macro-101/</guid>
    <description><![CDATA[Intro In the process of learning vim, the most enlightening sentence for me is :
vim is a kind of programming language
I once try to learn vim a long time ago. However, the key combination logic is very difficult to remember in my opinion. So I later gave up learning vim and switched to a normal text editor. My view of vim changed when I met this course: Missing semester.]]></description>
</item>
<item>
    <title>How to use the semantic actions to generate the symbol tables in ANTLR4</title>
    <link>https://martinlwx.github.io/en/how-to-use-antlr4-to-make-semantic-actions/</link>
    <pubDate>Sat, 28 May 2022 21:09:05 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/how-to-use-antlr4-to-make-semantic-actions/</guid>
    <description><![CDATA[What are the semantic actions When the parser processes the input code, it not only determines whether the syntax is correct but also performs some useful actions. These actions are called semantic actions. In fact, it is a piece of code, which is generally embedded in the rules of the grammar file. Then when the parser applies this specific rule, the code you set will be executed. From another perspective, semantic actions are actually &ldquo;triggers&rdquo;, and the trigger condition is that the parser applies the corresponding rules.]]></description>
</item>
</channel>
</rss>
