<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Course - Category - MartinLwx&#39;s blog</title>
        <link>https://martinlwx.github.io/en/categories/course/</link>
        <description>Course - Category - MartinLwx&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><lastBuildDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/categories/course/" rel="self" type="application/rss+xml" /><item>
    <title>Solution of Proj4. Scheme Interpreter of CS61A (2021-Fall)</title>
    <link>https://martinlwx.github.io/en/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</link>
    <pubDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</guid>
    <description><![CDATA[Intro Recently, I am reading a book called Crafting interpreters written by Robert Nystrom. In the original book, a Tree-walker interpreter jlox was implemented in Java. And I am trying to rewrite in Python - pylox. I highly recommend it👍. At this moment, I suddenly remembered that there were a few small issues with the Scheme interpreter for CS61A that I had not resolved after finishing it a year ago, which kept it in an unfinished state.]]></description>
</item>
<item>
    <title>Solution of Proj3.Ants vs SomeBees of CS61A (2021-Fall)</title>
    <link>https://martinlwx.github.io/en/proj3.ants-vs-somebees-of-cs61a-of-ucb/</link>
    <pubDate>Thu, 10 Mar 2022 21:43:59 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/proj3.ants-vs-somebees-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Intro I have finished the first two projects - Hog and Cats. The first two projects are relatively simple and uncomplicated. But today, the difficulty of the third project has indeed increased (you can see how complicated this is by looking at the rules of the game). It feels like Plants vs. Zombies
So I&rsquo;m going to write a blog to sort out the ideas when writing code. &#x1f917;
Phase 1: Basic gameplay Problem 1 (1 pt) Part A: Currently, there is no cost for placing any type of Ant, and so there is no challenge to the game.]]></description>
</item>
<item>
    <title>Lab14 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/lab14-cs61a-of-ucb/</link>
    <pubDate>Thu, 03 Mar 2022 08:17:14 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/lab14-cs61a-of-ucb/</guid>
    <description><![CDATA[Trees Q1: Prune Min Write a function that prunes a Tree t mutatively. t and its branches always have zero or two branches. For the trees with two branches, reduce the number of branches from two to one by keeping the branch that has the smaller label value. Do nothing with trees with zero branches.
Prune the tree in a direction of your choosing (top down or bottom up). The result should be a linear tree.]]></description>
</item>
<item>
    <title>Hw10 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw10-of-cs61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 13:36:13 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/hw10-of-cs61a-of-ucb/</guid>
    <description><![CDATA[BNF Q1: Grouping and Pipes In this question, you will add support for grouping and piping.
Recall that grouping allows for an entire regular expression to be treated as a single unit, and piping allows for a pattern to match an expression on either side. Combined, these will let us create patterns which match multiple strings!
Define the group and pipe expressions in your grammar.
A group consists of any regex expression surrounded by parentheses (()).]]></description>
</item>
<item>
    <title>Lab12 CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/lab12-ca61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 11:15:08 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/lab12-ca61a-of-ucb/</guid>
    <description><![CDATA[Regular Expressions Q1: Calculator Ops Write a regular expression that parses strings written in the 61A Calculator language and returns any expressions which have two numeric operands, leaving out the parentheses around them.
We need to write a regular expression to match a pattern - (operand operator1 operator2). The operands consist of +, -, *, /. We can use [] here. Don&rsquo;t forget to put a \ in front of - to escape it.]]></description>
</item>
<item>
    <title>Hw09 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw09-of-cs61a-of-ucb/</link>
    <pubDate>Tue, 01 Mar 2022 21:13:22 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/hw09-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q2: Roman Numerals Write a regular expression that finds any string of letters that resemble a Roman numeral and aren&rsquo;t part of another word. A Roman numeral is made up of the letters I, V, X, L, C, D, M and is at least one letter long.
For the purposes of this problem, don&rsquo;t worry about whether or not a Roman numeral is valid. For example, &ldquo;VIIIII&rdquo; is not a Roman numeral, but it is fine if your regex matches it.]]></description>
</item>
<item>
    <title>Lab11 CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/lab11-cs61a-of-ucb/</link>
    <pubDate>Tue, 01 Mar 2022 00:41:21 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/lab11-cs61a-of-ucb/</guid>
    <description><![CDATA[Context Problem 1 Important: Your code for this part should go in buffer.py.
Your job in this part is to implement the current and pop_first methods of the Buffer class.
current should return the current token of the current line we&rsquo;re on in the Buffer instance without removing it. If there are no more tokens in the current line, then current should move onto the next valid line, and return the first token of this line.]]></description>
</item>
<item>
    <title>Hw08 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw08-of-cs61a-of-ucb/</link>
    <pubDate>Mon, 28 Feb 2022 00:28:31 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/hw08-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q1: My Filter Write a procedure my-filter, which takes a predicate func and a list lst, and returns a new list containing only elements of the list that satisfy the predicate. The output should contain the elements in the same order that they appeared in the original list.
Note: Make sure that you are not just calling the built-in filter function in Scheme - we are asking you to re-implement this!]]></description>
</item>
<item>
    <title>Hw07 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw07-of-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 16:58:10 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/hw07-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q1: Thane of Cadr Define the procedures cadr and caddr, which return the second and third elements of a list, respectively. If you would like a quick refresher on scheme syntax consider looking at Lab 10 Scheme Refresher.
We need to implement the function c???r. To have a better understanding of this notation, you should look from back to the front in ???. For example, the cadr function will call cdr then call car on the input.]]></description>
</item>
<item>
    <title>Hw06 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw06-of-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 13:17:39 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/en/hw06-of-cs61a-of-ucb/</guid>
    <description><![CDATA[OOP Q1: Vending Machine In this question you&rsquo;ll create a vending machine that only outputs a single product and provides change when needed.
Create a class called VendingMachine that represents a vending machine for some product. A Vending Machineobject returns strings describing its interactions. Remember to match exactly the strings in the doctests &ndash; including punctuation and spacing!
Fill in the VendingMachine class, adding attributes and methods as appropriate, such that its behavior matches the following doctests:]]></description>
</item>
</channel>
</rss>
