<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Vim-Neovim - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/vim-neovim/</link>
        <description>Vim-Neovim - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sun, 03 Mar 2024 19:46:48 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/vim-neovim/" rel="self" type="application/rss+xml" /><item>
    <title>Learn to use text-object in Vim&amp;Neovim</title>
    <link>https://martinlwx.github.io/en/learn-to-use-text-objects-in-vim/</link>
    <pubDate>Sun, 03 Mar 2024 19:46:48 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/learn-to-use-text-objects-in-vim/</guid>
    <description><![CDATA[IntroYou probably do not know what the text-object is in Vim/Neovim. However, you may use it in your daily life. For instance, When you are writing code, you may want to change the arguments of a function. Take the following code as an example, let&rsquo;s say you want to change the function call to bar(3, 2, 1), and the cursor currently stays on the ,
1 2 3 4 5 6 def foo(): .]]></description>
</item><item>
    <title>Neovim Setup for OCaml</title>
    <link>https://martinlwx.github.io/en/neovim-setup-for-ocaml/</link>
    <pubDate>Tue, 23 Jan 2024 12:55:46 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/neovim-setup-for-ocaml/</guid>
    <description><![CDATA[IntroIn previous post, I elaborated on how to set up Neovim from scratch. However, I didn&rsquo;t answer the following questions:
What if an LSP does not support formatting, how to configure Neovim to support a third-party code formatting tool? How to change configuration files when adding a new programming language? Recently I was learning OCaml, I thought it would be a good chance to answer the questions.
Info I assume you have already read my previous post, so I will omit some details here.]]></description>
</item><item>
    <title>Transform Your Neovim into a IDE: A Step-by-Step Guide</title>
    <link>https://martinlwx.github.io/en/config-neovim-from-scratch/</link>
    <pubDate>Wed, 08 Feb 2023 15:01:42 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/config-neovim-from-scratch/</guid>
    <description><![CDATA[Info Further reading
How to set up Neovim for a new programming langauge and get more control over code formatting, please refer to the next post Versions infoI use a Macbook pro-2020 Intel Edition with macOS 13.2. This is my Nvim edition:
1 2 3 4 5 6 7 8 9 10 11 12 NVIM v0.8.3 Build type: Release LuaJIT 2.1.0-beta3 Compiled by brew@Ventura Features: +acl +iconv +tui See &#34;:help feature-compile&#34; system vimrc file: &#34;$VIM/sysinit.]]></description>
</item><item>
    <title>Vim Macro 101</title>
    <link>https://martinlwx.github.io/en/vim-macro-101/</link>
    <pubDate>Sat, 02 Jul 2022 10:40:38 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/vim-macro-101/</guid>
    <description><![CDATA[IntroIn the process of learning Vim, the most enlightening sentence for me is :
Vim is a kind of programming language
I once tried to learn Vim a long time ago. However, the keystroke combinations are very difficult to memorize in my opinion. So I later gave up learning Vim and switched to a normal text editor. My view of Vim changed when I took this course: Missing semester. I started to regard Vim as a kind of programming language rather than just a text editor.]]></description>
</item><item>
    <title>The solutions for exercise 03&amp;04 of MIT.Missing-semester(2020)</title>
    <link>https://martinlwx.github.io/en/exercise03-04-missingsemester-2020/</link>
    <pubDate>Sun, 26 Dec 2021 00:19:54 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/exercise03-04-missingsemester-2020/</guid>
    <description><![CDATA[Lecture 03. Editors (Vim) Complete vimtutor. Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window.
It is a tutorial for beginners of vim. I will just put some notes which are not mentioned in course here.
U command: When we press u in normal mode, we can undo the last command. What U does is fixing a whole line.
Ctrl + G: show your location in the file and the file status.]]></description>
</item></channel>
</rss>
