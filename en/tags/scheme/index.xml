<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Scheme - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/scheme/</link>
        <description>Scheme - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/scheme/" rel="self" type="application/rss+xml" /><item>
    <title>Solution of Proj4. Scheme Interpreter of CS61A (2021-Fall)</title>
    <link>https://martinlwx.github.io/en/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</link>
    <pubDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</pubDate><author>martinlwx@163.com (MartinLwx)</author><guid>https://martinlwx.github.io/en/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</guid>
    <description><![CDATA[Intro Recently, I am reading a book called Crafting interpreters written by Robert Nystrom. In the original book, a Tree-walker interpreter jlox was implemented in Java. And I am trying to rewrite in Python - pylox. I highly recommend it👍. At this moment, I suddenly remembered that there were a few small issues with the Scheme interpreter for CS61A that I had not resolved after finishing it a year ago, which kept it in an unfinished state.]]></description>
</item>
<item>
    <title>Hw08 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw08-of-cs61a-of-ucb/</link>
    <pubDate>Mon, 28 Feb 2022 00:28:31 &#43;0800</pubDate><author>martinlwx@163.com (MartinLwx)</author><guid>https://martinlwx.github.io/en/hw08-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q1: My Filter Write a procedure my-filter, which takes a predicate func and a list lst, and returns a new list containing only elements of the list that satisfy the predicate. The output should contain the elements in the same order that they appeared in the original list.
Note: Make sure that you are not just calling the built-in filter function in Scheme - we are asking you to re-implement this!]]></description>
</item>
<item>
    <title>Hw07 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/hw07-of-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 16:58:10 &#43;0800</pubDate><author>martinlwx@163.com (MartinLwx)</author><guid>https://martinlwx.github.io/en/hw07-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Q1: Thane of Cadr Define the procedures cadr and caddr, which return the second and third elements of a list, respectively. If you would like a quick refresher on scheme syntax consider looking at Lab 10 Scheme Refresher.
We need to implement the function c???r. To have a better understanding of this notation, you should look from back to the front in ???. For example, the cadr function will call cdr then call car on the input.]]></description>
</item>
<item>
    <title>Lab10 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/lab10-cs61a-of-ucb/</link>
    <pubDate>Sun, 27 Feb 2022 01:04:02 &#43;0800</pubDate><author>martinlwx@163.com (MartinLwx)</author><guid>https://martinlwx.github.io/en/lab10-cs61a-of-ucb/</guid>
    <description><![CDATA[Coding Questions Q2: Over or Under Define a procedure over-or-under which takes in a number num1 and a number num2 and returns the following:
-1 if num1 is less than num2 0 if num1 is equal to num2 1 if num1 is greater than num2 Challenge: Implement this in 2 different ways using if and cond!
1 2 3 (define (over-or-under num1 num2) &#39;YOUR-CODE-HERE ) The problem itself is not difficult.]]></description>
</item>
</channel>
</rss>
