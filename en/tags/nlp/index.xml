<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>NLP - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/nlp/</link>
        <description>NLP - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Thu, 12 Oct 2023 18:29:31 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/nlp/" rel="self" type="application/rss+xml" /><item>
    <title>LLM inference optimization - KV Cache</title>
    <link>https://martinlwx.github.io/en/llm-inference-optimization-kv-cache/</link>
    <pubDate>Thu, 12 Oct 2023 18:29:31 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/llm-inference-optimization-kv-cache/</guid>
    <description><![CDATA[<h2 id="background" class="headerLink">
    <a href="#background" class="header-mark" aria-label="Header mark for 'Background'"></a>Background</h2><p>The secret behind LLM is that it will generate tokens one by one based on all the previous tokens.</p>
<p><em>Let&rsquo;s assume that we have already generated $t$ tokens, denoted by $x_{1:t}$. In the next iteration, the LLM will generate $x_{1:t+1}$. Note that the first $t$ tokens are the same</em>.</p>
<p>$$x_{1:t+1}=\text{LLM}(x_{1:t})$$</p>
<p><em>The next iteration is similar.</em></p>
<p>$$x_{1:t+2}=\text{LLM}(x_{1:t+1})$$</p>
<p>In summary, in each iteration, we will <strong>use the output of the previous round</strong> as a new input for the LLM. Generally, this process will continue until the output reaches the maximum length we predefined or the LLM itself generates a special token, signifying the completion of the generating process.</p>]]></description>
</item><item>
    <title>BPE Tokenization Demystified: Implementation and Examples</title>
    <link>https://martinlwx.github.io/en/the-bpe-tokenizer/</link>
    <pubDate>Thu, 24 Aug 2023 22:06:37 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/the-bpe-tokenizer/</guid>
    <description><![CDATA[<h2 id="a-taxonomy-of-tokenization-methods" class="headerLink">
    <a href="#a-taxonomy-of-tokenization-methods" class="header-mark" aria-label="Header mark for 'A taxonomy of tokenization methods'"></a>A taxonomy of tokenization methods</h2><p>In NLP, one crux of problems is - how to tokenize the text. There are three methods available:</p>
<ul>
<li>Char-level</li>
<li>Word-level</li>
<li>Subword-level</li>
</ul>
<p>Let&rsquo;s talk about the Char-level tokenizer. That is, we tokenize the text into a char stream. <em>For instance, <code>highest -&gt; h, i, g, h, e, s, t</code></em>. One advantage of the Char-level tokenizer is that the size of Vocab won&rsquo;t be that large. The size of Vocab is equal to the size of the alphabet. So you probably won&rsquo;t meet the infamous Out-of-vocabulary(OOV) problem. However, the downside is that <strong>the char itself does not convey too much information</strong>, and <strong>we will get too many tokens after tokenizing</strong>. <em>Try to imagine that a simple word highest will give us 7 tokens</em>ðŸ˜¨</p>]]></description>
</item><item>
    <title>TF-IDF model</title>
    <link>https://martinlwx.github.io/en/an-introduction-of-tf-idf-model/</link>
    <pubDate>Wed, 16 Aug 2023 22:23:26 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/an-introduction-of-tf-idf-model/</guid>
    <description><![CDATA[<h2 id="what-is-the-tf-idf-model" class="headerLink">
    <a href="#what-is-the-tf-idf-model" class="header-mark" aria-label="Header mark for 'What is the TF-IDF model'"></a>What is the TF-IDF model</h2><p>In previous <a href="https://martinlwx.github.io/en/an-introduction-of-bag-of-word-model/" rel="">post</a>, we talked about the bag-of-word model, which has many limitations. Today we take a step further to see if we can try to fix <strong>one of the limitations - Each word has the same importance</strong>.</p>
<blockquote>
  <p>ðŸ’¡ The crux of the problem - <strong>How to define the word importance</strong>?</p>

</blockquote><p>One idea is: The more frequently a word appears <strong>within a single document</strong>, the more important it is <strong>for that document</strong>. <em>For instance, in an article discussing dogs, the word &ldquo;dog&rdquo; is likely to appear frequently, reflecting the document&rsquo;s main topic</em>.</p>]]></description>
</item><item>
    <title>Bag-of-Word model</title>
    <link>https://martinlwx.github.io/en/an-introduction-of-bag-of-word-model/</link>
    <pubDate>Fri, 11 Aug 2023 18:55:09 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/an-introduction-of-bag-of-word-model/</guid>
    <description><![CDATA[<h2 id="what-is-the-bag-of-word-model" class="headerLink">
    <a href="#what-is-the-bag-of-word-model" class="header-mark" aria-label="Header mark for 'What is the bag-of-word model?'"></a>What is the bag-of-word model?</h2><p>In NLP, we need to represent each document as a vector because machine learning can only accept input as numbers. That is, we want to find a <em>magic</em> function that:
$$
f(\text{document}) = vector
$$</p>
<p>Today&rsquo;s topic is <strong>bag-of-word(BoW) model</strong>, which can transform a document into a vector representation.</p>
<blockquote>
  <p>ðŸ’¡ Although the BoW model is outdated in 2023, I still encourage you to learn from the history and think about some <strong>essential problems</strong>:</p>]]></description>
</item></channel>
</rss>
