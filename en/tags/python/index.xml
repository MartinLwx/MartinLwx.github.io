<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/python/</link>
        <description>Python - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Sat, 17 Aug 2024 14:22:14 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>Learn to Use @dataclass in Python</title>
    <link>https://martinlwx.github.io/en/learn-to-use-dataclass-in-python/</link>
    <pubDate>Sat, 17 Aug 2024 14:22:14 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/learn-to-use-dataclass-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>I like Python&rsquo;s tuple, which allows us to quickly <em>bundle</em> together values of <em>different types</em> as a single entity and manage them in an intuitive and easy-to-use way. However, I find that once the tuple has <em>many fields</em>, I&rsquo;m <em>forced to</em> add a comment to indicate the meaning of each field. For example,</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">python</p>]]></description>
</item><item>
    <title>Solution of Proj4. Scheme Interpreter of CS61A (2021-Fall)</title>
    <link>https://martinlwx.github.io/en/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</link>
    <pubDate>Fri, 21 Apr 2023 10:18:16 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/proj4-scheme-interpreter-of-cs61a-of-ucb-fa21/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>Recently, I am reading a book called <a href="https://craftinginterpreters.com/" target="_blank" rel="noopener noreferrer"><em>Crafting interpreters</em></a> written by Robert Nystrom. In the original book, a Tree-walker interpreter jlox was implemented in Java. And I am trying to rewrite in Python - <a href="https://github.com/MartinLwx/pylox" target="_blank" rel="noopener noreferrer">pylox</a>. I highly recommend itüëç. At this moment, I suddenly remembered that there were a few small issues with the Scheme interpreter for CS61A that I had not resolved after finishing it a year ago, which kept it in an unfinished state. So today I opened the project and intended to run through it from beginning to end and talk about the ideas.</p>]]></description>
</item><item>
    <title>Type hints: what and why</title>
    <link>https://martinlwx.github.io/en/type-hints-in-python/</link>
    <pubDate>Fri, 13 Jan 2023 16:18:02 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/type-hints-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>I was immediately drawn to Python when I first encountered it due to its dynamic language features. Python use the &ldquo;duck typing&rdquo; design, which means that the type of an object is not as important as its behavior. This feature allows for faster development and a reduction in burdensome type declarations. Additionally, the support of powerful third-party libraries solidifies Python as my preferred programming language.üò∫</p>
<p>However, with the proposal of PEP 484<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, Python decided to introduce type hints, which seem to be in line with statically typed languages. <strong>It‚Äôs not true though, Python‚Äôs type hints are optional, and it has no runtime effect</strong>.</p>]]></description>
</item><item>
    <title>Unpacking in Python 3.5</title>
    <link>https://martinlwx.github.io/en/unpacking-in-python/</link>
    <pubDate>Mon, 05 Dec 2022 23:16:30 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/unpacking-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>Today I want to talk about the unpacking operators(<code>*</code> and <code>**</code>) in python.</p>
<h2 id="basic-usage" class="headerLink">
    <a href="#basic-usage" class="header-mark" aria-label="Header mark for 'Basic usage'"></a>Basic usage</h2><p>We use <code>*</code> for numeric data types to indicate we want to do multiplication. However, we can also apply <code>*</code> to <strong>iterable objects</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, which means we want to unpack all the elements inside them.</p>
<blockquote>
  <p>üìíThe built-in iterable objects: <code>list</code>, <code>tuple</code>, <code>set</code>, and <code>dict</code></p>

</blockquote><h3 id="starred-assignmentexpression" class="headerLink">
    <a href="#starred-assignmentexpression" class="header-mark" aria-label="Header mark for 'Starred assignment/expression'"></a>Starred assignment/expression</h3><p>In the release of python 3.0, it is shipped with powerful iterable unpacking operations<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, which is called the starred assignment/expression(or parallel assignment).</p>]]></description>
</item><item>
    <title>The f-strings in Python3.6</title>
    <link>https://martinlwx.github.io/en/f-strings-in-python/</link>
    <pubDate>Wed, 16 Nov 2022 22:15:03 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/f-strings-in-python/</guid>
    <description><![CDATA[<div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>Info<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content"><p><strong>Updates</strong>Ôºö</p>]]></description>
</item><item>
    <title>Walrus Operator in Python 3.8</title>
    <link>https://martinlwx.github.io/en/walrus-operator-in-python/</link>
    <pubDate>Sat, 29 Oct 2022 23:36:12 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/walrus-operator-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>Today I‚Äôm going to talk about a new feature introduced in Python 3.8: the Walrus operatorÔºà<code>:=</code>Ôºâ, which is a much-debated feature, but it‚Äôs finally passed and released ü§î</p>
<p>In Python, an assignment statement (<code>=</code>) is not an expression but a statement. Walrus operator is expression though. The difference between statement and expression can be simply understood as: expression always returns a value, while statement does not return a value.</p>]]></description>
</item><item>
    <title>Pattern Matching in Python 3.10</title>
    <link>https://martinlwx.github.io/en/pattern-matching-in-python/</link>
    <pubDate>Sun, 16 Oct 2022 15:14:57 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/pattern-matching-in-python/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>Today I want to talk about the new feature bring in Python 3.10 &ndash; Pattern matching üéâ</p>
<p>Those who have learned C language must be familiar with the following <code>switch</code> statement:</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">c</p>]]></description>
</item><item>
    <title>Solution of Proj3.Ants vs SomeBees of CS61A (2021-Fall)</title>
    <link>https://martinlwx.github.io/en/proj3.ants-vs-somebees-of-cs61a-of-ucb/</link>
    <pubDate>Thu, 10 Mar 2022 21:43:59 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/proj3.ants-vs-somebees-of-cs61a-of-ucb/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><hr>
<p>I have finished the first two projects - <a href="https://github.com/MartinLwx/CS61A-Fall-2021-UCB/tree/main/Projects/hog" target="_blank" rel="noopener noreferrer">Hog</a> and <a href="https://github.com/MartinLwx/CS61A-Fall-2021-UCB/tree/main/Projects/cats" target="_blank" rel="noopener noreferrer">Cats</a>. The first two projects are relatively simple and uncomplicated. But today, the difficulty of the third project has indeed increased (you can see how complicated this is by looking at the rules of the game). It feels like <em>Plants vs. Zombies</em></p>
<p>So I&rsquo;m going to write a blog to sort out the ideas when writing code. &#x1f917;</p>]]></description>
</item><item>
    <title>Lab14 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/lab14-cs61a-of-ucb/</link>
    <pubDate>Thu, 03 Mar 2022 08:17:14 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/lab14-cs61a-of-ucb/</guid>
    <description><![CDATA[<h2 id="trees" class="headerLink">
    <a href="#trees" class="header-mark" aria-label="Header mark for 'Trees'"></a>Trees</h2><hr>
<h3 id="q1-prune-min" class="headerLink">
    <a href="#q1-prune-min" class="header-mark" aria-label="Header mark for 'Q1: Prune Min'"></a>Q1: Prune Min</h3><blockquote>
  <p>Write a function that prunes a <code>Tree</code> <code>t</code> mutatively. <code>t</code> and its branches always have zero or two branches. For the trees with two branches, reduce the number of branches from two to one by keeping the branch that has the smaller label value. Do nothing with trees with zero branches.</p>
<p>Prune the tree in a direction of your choosing (top down or bottom up). The result should be a linear tree.</p>]]></description>
</item><item>
    <title>Lab12 - CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/en/lab12-ca61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 11:15:08 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/lab12-ca61a-of-ucb/</guid>
    <description><![CDATA[<h2 id="regular-expressions" class="headerLink">
    <a href="#regular-expressions" class="header-mark" aria-label="Header mark for 'Regular Expressions'"></a>Regular Expressions</h2><hr>
<h3 id="q1-calculator-ops" class="headerLink">
    <a href="#q1-calculator-ops" class="header-mark" aria-label="Header mark for 'Q1: Calculator Ops'"></a>Q1: Calculator Ops</h3><blockquote>
  <p>Write a regular expression that parses strings written in the 61A Calculator language and returns any expressions which have two numeric operands, leaving out the parentheses around them.</p>

</blockquote><p>We need to write a regular expression to match a pattern - <code>(operand operator1 operator2)</code>. The operands consist of <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. We can use <code>[]</code> here. Don&rsquo;t forget to put a <code>\</code> in front of <code>-</code> to escape it.</p>]]></description>
</item></channel>
</rss>
