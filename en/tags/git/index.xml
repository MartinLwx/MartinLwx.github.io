<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Git - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/git/</link>
        <description>Git - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Fri, 11 Oct 2024 00:16:14 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/git/" rel="self" type="application/rss+xml" /><item>
    <title>My workflows of using vim-fugitive in Neovim</title>
    <link>https://martinlwx.github.io/en/my-workflow-of-using-vim-fugitive-in-neovim/</link>
    <pubDate>Fri, 11 Oct 2024 00:16:14 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/my-workflow-of-using-vim-fugitive-in-neovim/</guid>
    <description><![CDATA[<h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark" aria-label="Header mark for 'Intro'"></a>Intro</h2><p>Recently, while using Git with Neovim, I noticed that my workflow isn&rsquo;t as smooth as I&rsquo;d like it to be. I tend to <em>exit Neovim</em>, and then type git commands in the terminal. Before committing code changes, I usually check the diff information using <a href="https://github.com/dandavison/delta" target="_blank" rel="noopener noreferrer">delta</a>. To cut down the number of keystrokes, I&rsquo;ve also enabled the <a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener noreferrer">Oh My Zsh</a>&rsquo;s <code>git</code> plugin, so I can use a bunch of shortcuts like <code>ga = git add</code> and <code>gcmsg = git commit -m</code></p>]]></description>
</item><item>
    <title>Git bundle guide</title>
    <link>https://martinlwx.github.io/en/git-bundle-tutorial/</link>
    <pubDate>Fri, 16 Jun 2023 23:48:28 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/git-bundle-tutorial/</guid>
    <description><![CDATA[<h2 id="what-is-the-git-bundle-command" class="headerLink">
    <a href="#what-is-the-git-bundle-command" class="header-mark" aria-label="Header mark for 'What is the git bundle command'"></a>What is the git bundle command</h2><p><code>git bundle</code> is a relatively less commonly used git command. Its purpose is to <strong>package a git repo into a single file</strong>, which can then be used by others to recreate the original git repo. Additionally, <code>git bundle</code> supports <strong>incremental update</strong>. Before I learned about the <code>git bundle</code> command, I would usually directly use <code>tar czf some_git_repo</code> to create a package for a git repo. Recently, I accidentally discovered the <code>git bundle</code> and found it quite usefulüçª.</p>]]></description>
</item><item>
    <title>The solutions for exercise08 of Missingsemester(2020)</title>
    <link>https://martinlwx.github.io/en/exercise08-missingsemester-2020/</link>
    <pubDate>Sat, 08 Jan 2022 20:01:11 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/exercise08-missingsemester-2020/</guid>
    <description><![CDATA[<h2 id="lecture-08-metaprogramming" class="headerLink">
    <a href="#lecture-08-metaprogramming" class="header-mark" aria-label="Header mark for 'Lecture 08. Metaprogramming'"></a>Lecture 08. Metaprogramming</h2><hr>
<blockquote>
<p>Most makefiles provide a target called <code>clean</code>. This isn‚Äôt intended to produce a file called <code>clean</code>, but instead to clean up any files that can be re-built by make. Think of it as a way to ‚Äúundo‚Äù all of the build steps. Implement a <code>clean</code> target for the <code>paper.pdf</code> <code>Makefile</code> above. You will have to make the target <a href="https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html" target="_blank" rel="noopener noreferrer">phony</a>. You may find the <a href="https://git-scm.com/docs/git-ls-files" target="_blank" rel="noopener noreferrer"><code>git ls-files</code></a>subcommand useful. A number of other very common make targets are listed <a href="https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html#Standard-Targets" target="_blank" rel="noopener noreferrer">here</a>.</p>]]></description>
</item><item>
    <title>The solutions for exercise 05&amp;06 of MIT.Missing-semester(2020)</title>
    <link>https://martinlwx.github.io/en/exercise05-06-missingsemester-2020/</link>
    <pubDate>Mon, 27 Dec 2021 14:28:33 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/exercise05-06-missingsemester-2020/</guid>
    <description><![CDATA[<h2 id="lecture05-command-line-environment" class="headerLink">
    <a href="#lecture05-command-line-environment" class="header-mark" aria-label="Header mark for 'Lecture05. Command-line Environment'"></a>Lecture05. Command-line Environment</h2><hr>
<h3 id="job-control" class="headerLink">
    <a href="#job-control" class="header-mark" aria-label="Header mark for 'Job control'"></a>Job control</h3><blockquote>
<p>From what we have seen, we can use some <code>ps aux | grep</code> commands to get our jobs‚Äô pids and then kill them, but there are better ways to do it. Start a <code>sleep 10000</code> job in a terminal, background it with <code>Ctrl-Z</code> and continue its execution with <code>bg</code>. Now use <a href="https://www.man7.org/linux/man-pages/man1/pgrep.1.html" target="_blank" rel="noopener noreferrer"><code>pgrep</code></a> to find its pid and <a href="http://man7.org/linux/man-pages/man1/pgrep.1.html" target="_blank" rel="noopener noreferrer"><code>pkill</code></a> to kill it without ever typing the pid itself. (Hint: use the <code>-af</code> flags).</p>]]></description>
</item></channel>
</rss>
