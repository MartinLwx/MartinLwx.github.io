<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Git - Tag - MartinLwx&#39;s Blog</title>
        <link>https://martinlwx.github.io/en/tags/git/</link>
        <description>Git - Tag - MartinLwx&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><copyright>&lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright><lastBuildDate>Fri, 16 Jun 2023 23:48:28 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/en/tags/git/" rel="self" type="application/rss+xml" /><item>
    <title>Git bundle guide</title>
    <link>https://martinlwx.github.io/en/git-bundle-tutorial/</link>
    <pubDate>Fri, 16 Jun 2023 23:48:28 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/git-bundle-tutorial/</guid>
    <description><![CDATA[What is the git bundle commandgit bundle is a relatively less commonly used git command. Its purpose is to package a git repo into a single file, which can then be used by others to recreate the original git repo. Additionally, git bundle supports incremental update. Before I learned about the git bundle command, I would usually directly use tar czf some_git_repo to create a package for a git repo.]]></description>
</item><item>
    <title>The solutions for exercise08 of Missingsemester(2020)</title>
    <link>https://martinlwx.github.io/en/exercise08-missingsemester-2020/</link>
    <pubDate>Sat, 08 Jan 2022 20:01:11 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/exercise08-missingsemester-2020/</guid>
    <description><![CDATA[Lecture 08. Metaprogramming Most makefiles provide a target called clean. This isn’t intended to produce a file called clean, but instead to clean up any files that can be re-built by make. Think of it as a way to “undo” all of the build steps. Implement a clean target for the paper.pdf Makefile above. You will have to make the target phony. You may find the git ls-filessubcommand useful. A number of other very common make targets are listed here.]]></description>
</item><item>
    <title>The solutions for exercise 05&amp;06 of MIT.Missing-semester(2020)</title>
    <link>https://martinlwx.github.io/en/exercise05-06-missingsemester-2020/</link>
    <pubDate>Mon, 27 Dec 2021 14:28:33 &#43;0800</pubDate><author>
        <name>MartinLwx</name>
    </author><guid>https://martinlwx.github.io/en/exercise05-06-missingsemester-2020/</guid>
    <description><![CDATA[Lecture05. Command-line Environment Job control From what we have seen, we can use some ps aux | grep commands to get our jobs’ pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg. Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself.]]></description>
</item></channel>
</rss>
