<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - Category - MartinLwx&#39;s blog</title>
        <link>https://martinlwx.github.io/categories/python/</link>
        <description>Python - Category - MartinLwx&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><lastBuildDate>Sat, 29 Oct 2022 23:36:12 &#43;0800</lastBuildDate><atom:link href="https://martinlwx.github.io/categories/python/" rel="self" type="application/rss+xml" /><item>
    <title>Walrus Operator in Python3.8</title>
    <link>https://martinlwx.github.io/walrus-operator-in-python/</link>
    <pubDate>Sat, 29 Oct 2022 23:36:12 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/walrus-operator-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today Iâ€™m going to talk about a new feature introduced in Python 3.8: the Walrus operatorï¼ˆ:=ï¼‰, which is a much-debated feature, but itâ€™s finally passed and released ðŸ¤”
In Python, an assignment statement (=) is not an expression but a statement. Walrus operator is expression though.]]></description>
</item>
<item>
    <title>Pattern Matching in Python</title>
    <link>https://martinlwx.github.io/pattern-matching-in-python/</link>
    <pubDate>Sun, 16 Oct 2022 15:14:57 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/pattern-matching-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today I want to talk about the new feature bring in Python 3.10 &ndash; Pattern matching ðŸŽ‰
Those who have learned C language must be familiar with the following switch statement:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 switch (expression) { case constant_1: // statements break; case constant_2: // statements break; // Fall through // the value of the expression can be either constant_3 or constant_4 :) case constant_3: case constant_4: // statements default: // default statements } To recap, the syntax rules of the switch statement:]]></description>
</item>
<item>
    <title>How to Use Logging in Python</title>
    <link>https://martinlwx.github.io/how-to-use-logging-in-python/</link>
    <pubDate>Fri, 07 Jan 2022 23:32:50 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/how-to-use-logging-in-python/</guid>
    <description><![CDATA[Intro Recently I was fine-tuning my deep learning model, and I habitually started to use print to print some key information on the terminal. So my workflow is like:
I type some hyperparameters to train my model. I manually opened an Excel to record the hyperparameters used and the model evaluation results. And I will go back to step 1. If I am not satisfied with results. Soon, I became bored with this workflow (In fact, I kept this for quite a long time.]]></description>
</item>
<item>
    <title>How to draw a simple relation graph in Python</title>
    <link>https://martinlwx.github.io/how-to-draw-a-simple-relation-graph-in-python/</link>
    <pubDate>Sat, 25 Dec 2021 10:21:15 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/how-to-draw-a-simple-relation-graph-in-python/</guid>
    <description><![CDATA[Intro The process of drawing a simple relation graph in python can be broken down into 2 steps.
Define a graph. Draw a graph. Step 1. Define a graph In this step, we will use the networkx package.
Install tutorial If you are using conda, you can just type conda install networkx
If you are using pip, you can just type pip install networkx
Nodes First of all, you need to create a graph.]]></description>
</item>
</channel>
</rss>
