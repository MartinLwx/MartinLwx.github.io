<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course on MartinLwx&#39;s blog</title>
    <link>https://martinlwx.github.io/tags/course/</link>
    <description>Recent content in Course on MartinLwx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Feb 2022 15:24:28 +0800</lastBuildDate><atom:link href="https://martinlwx.github.io/tags/course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lab04 CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/lab04-cs61a-of-ucb/</link>
      <pubDate>Thu, 03 Feb 2022 15:24:28 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/lab04-cs61a-of-ucb/</guid>
      <description>Intro  I find it really interesting to solve recursive problems. I like this way of solving problems, the code is concise and intuitive, which is why I wrote this blog.
 üìí How to solve a recursive problem ?
 What is the base case ? How to break down the current problem into simpler ones ?   Later, I will follow this idea to solve the recursion problem in this lab.</description>
    </item>
    
    <item>
      <title>Proj0.2048 of CS61B(2021-Spring)</title>
      <link>https://martinlwx.github.io/post/proj0.2048-of-cs61b/</link>
      <pubDate>Sun, 30 Jan 2022 20:28:13 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/proj0.2048-of-cs61b/</guid>
      <description>Intro  In this assignment, we need to cope with four tasks. I will talk about these solutions in detail.
Task 1. public static boolean emptySpaceExists(Board b)  Task 1 asks us for checking if any of the tiles in the given board are null. The solution is to the problem is quite simple. All we need to do is iterating all tiles in the board. By using board.tile(col, row), we can easily get the state of the corresponding tile.</description>
    </item>
    
    <item>
      <title>Hw03 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw03-of-cs61a-of-ucb/</link>
      <pubDate>Mon, 24 Jan 2022 11:04:10 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw03-of-cs61a-of-ucb/</guid>
      <description>hw03. Recursion, Tree Recursion  Q1: Num eights  Write a recursive function num_eights that takes a positive integer pos and returns the number of times the digit 8 appears in pos.
Important: Use recursion; the tests will fail if you use any assignment statements. (You can however use function definitions if you so wish.)
 It is easy to think of the answer to this question, for we have seen a similar one in lecture.</description>
    </item>
    
    <item>
      <title>Hw00 of CS61B of UCB(2021-Spring)</title>
      <link>https://martinlwx.github.io/post/hw00-of-cs61b-of-ucb/</link>
      <pubDate>Fri, 21 Jan 2022 11:00:06 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw00-of-cs61b-of-ucb/</guid>
      <description>Hw00.fdf  Creative Exercise 1a: DrawTriangle  Your goal is to create a program that prints the following figure. Your code should use loops (i.e. shouldn‚Äôt just be five print statements, that‚Äôs no fun).
1 2 3 4 5  * ** *** **** *****    If you observe carefully, you can find that we need to print five lines in total(outside loop), and the number of each line depends on which line the current line is(inner loop).</description>
    </item>
    
    <item>
      <title>Hw02 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw02-of-cs61a-of-ucb/</link>
      <pubDate>Thu, 20 Jan 2022 17:18:13 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw02-of-cs61a-of-ucb/</guid>
      <description>hw02. Higher Order Functions  Q1: Product  The summation(n, term) function from the higher-order functions lecture adds up term(1) + ... + term(n). Write a similar function called product that returns term(1) * ... * term(n).
 This problem is quite easy, we just need to use * instead of +. The logic is similar to summation(n, term) function in the lecture.
Remember to set ans = 1 at first, after all, 0 * any numbers is always equal to 0 ü§ó</description>
    </item>
    
    <item>
      <title>Hw01 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw01-of-cs61a-of-ucb/</link>
      <pubDate>Tue, 18 Jan 2022 15:49:29 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw01-of-cs61a-of-ucb/</guid>
      <description>hw01. Control  Q1. Welcome Forms Skip :)
Q2. A Plus Abs B  Fill in the blanks in the following function for adding a to the absolute value of b, without calling abs. You may not modify any of the provided code other than the two blanks.
 This problem is easy if we know that we can bind names to functions. In this problem:
 When b &amp;lt; 0, a + abs(b) = a - b, so we should use sub When b &amp;gt; 0, a + abs(b) = a + b, so we should use add  1 2 3 4 5 6 7 8 9 10 11 12 13  def a_plus_abs_b(a, b): &amp;#34;&amp;#34;&amp;#34;Return a+abs(b), but without calling abs.</description>
    </item>
    
    <item>
      <title>the solutions for exercise09 of Missingsemester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise09-missingsemester-2020/</link>
      <pubDate>Mon, 10 Jan 2022 01:16:32 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise09-missingsemester-2020/</guid>
      <description>Lecture 09. Security and Cryptography  Entropy  Suppose a password is chosen as a concatenation of four lower-case dictionary words, where each word is selected uniformly at random from a dictionary of size 100,000. An example of such a password is correcthorsebatterystaple. How many bits of entropy does this have?
 In order to calculate the bits of entropy, we need to know how many possibilites there.
We can easily know the combinations count are $100000^4$ and the bits of entropy are $log_2 (100000^4)\approx 66\ bit$ ü§ó</description>
    </item>
    
    <item>
      <title>the solutions for exercise08 of Missingsemester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise08-missingsemester-2020/</link>
      <pubDate>Sat, 08 Jan 2022 20:01:11 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise08-missingsemester-2020/</guid>
      <description>Lecture 08. Metaprogramming   Most makefiles provide a target called clean. This isn‚Äôt intended to produce a file called clean, but instead to clean up any files that can be re-built by make. Think of it as a way to ‚Äúundo‚Äù all of the build steps. Implement a clean target for the paper.pdf Makefile above. You will have to make the target phony. You may find the git ls-filessubcommand useful.</description>
    </item>
    
    <item>
      <title>the solutions for exercise07 of Missingsemester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise07-missingsemester-2020/</link>
      <pubDate>Mon, 03 Jan 2022 01:09:06 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise07-missingsemester-2020/</guid>
      <description>debugging  Use journalctl on Linux or log show on macOS to get the super user accesses and commands in the last day. If there aren‚Äôt any you can execute some harmless commands such as sudo ls and check again.
 When I run log show --last 1d, it keeps running for along time. I don&amp;rsquo;t know how long it make take, so I will just execute harmless sudo ls to check the log.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 05&amp;06 of MIT.Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise05-06-missingsemester-2020/</link>
      <pubDate>Mon, 27 Dec 2021 14:28:33 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise05-06-missingsemester-2020/</guid>
      <description>Lecture05. Command-line Environment  Job control  From what we have seen, we can use some ps aux | grep commands to get our jobs‚Äô pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg. Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 03&amp;04 of MIT.Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise03-04-missingsemester-2020/</link>
      <pubDate>Sun, 26 Dec 2021 00:19:54 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise03-04-missingsemester-2020/</guid>
      <description>Lecture 03. Editors (Vim)  Complete vimtutor. Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window.
 It is a tutorial for beginners of vim. I will just put some notes which are not mentioned in course here.
  U command: When we press u in normal mode, we can undo the last command. What U does is fixing a whole line.
  Ctrl + G: show your location in the file and the file status.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 01&amp;02 of MIT. Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise01-02-missingsemester-2020/</link>
      <pubDate>Sat, 18 Dec 2021 10:11:22 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise01-02-missingsemester-2020/</guid>
      <description>Lecture 01. Shell   Create a new directory called missing under /tmp
 1  &amp;gt; mkdir -p /tmp/missing   üìí -p means Create intermediate directories as required
 Use touch to create a new file called semester in missing.
 1 2  &amp;gt; cd ~/tmp/missing &amp;gt; touch semester    Write the following into that file, one line at a time:
1 2  #!/bin/sh curl --head --silent https://missing.</description>
    </item>
    
  </channel>
</rss>
