<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>MartinLwx&#39;s blog</title>
        <link>https://martinlwx.github.io/</link>
        <description>Welcome to my blog :)</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>martinlwx@163.com (MartinLwx)</managingEditor>
            <webMaster>martinlwx@163.com (MartinLwx)</webMaster><lastBuildDate>Wed, 16 Nov 2022 22:15:03 &#43;0800</lastBuildDate>
            <atom:link href="https://martinlwx.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>f-strings in Python 3.6</title>
    <link>https://martinlwx.github.io/f-strings-in-python/</link>
    <pubDate>Wed, 16 Nov 2022 22:15:03 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/f-strings-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro String formatting can be regarded as one of the most common activities in daily programming. We often need to output various strings and precisely control their format.
In some outdated Python tutorials, you may see the use of % to format strings. However, after Python 3.]]></description>
</item>
<item>
    <title>Walrus Operator in Python 3.8</title>
    <link>https://martinlwx.github.io/walrus-operator-in-python/</link>
    <pubDate>Sat, 29 Oct 2022 23:36:12 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/walrus-operator-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today Iâ€™m going to talk about a new feature introduced in Python 3.8: the Walrus operatorï¼ˆ:=ï¼‰, which is a much-debated feature, but itâ€™s finally passed and released ðŸ¤”
In Python, an assignment statement (=) is not an expression but a statement. Walrus operator is expression though.]]></description>
</item>
<item>
    <title>Pattern Matching in Python 3.10</title>
    <link>https://martinlwx.github.io/pattern-matching-in-python/</link>
    <pubDate>Sun, 16 Oct 2022 15:14:57 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/pattern-matching-in-python/</guid>
    <description><![CDATA[This post is originally written in jupyter notebook and then convert to markdown. To get the original notebook files. Please check the repo
Intro Today I want to talk about the new feature bring in Python 3.10 &ndash; Pattern matching ðŸŽ‰
Those who have learned C language must be familiar with the following switch statement:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 switch (expression) { case constant_1: // statements break; case constant_2: // statements break; // Fall through // the value of the expression can be either constant_3 or constant_4 :) case constant_3: case constant_4: // statements default: // default statements } To recap, the syntax rules of the switch statement:]]></description>
</item>
<item>
    <title>What is stack and heap</title>
    <link>https://martinlwx.github.io/what-is-the-heap-and-stack/</link>
    <pubDate>Mon, 19 Sep 2022 19:01:04 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/what-is-the-heap-and-stack/</guid>
    <description><![CDATA[Intro If you&rsquo;ve been using dynamic languages like Python, Javascript, etc., you probably won&rsquo;t notice the difference between stack and heap. Because these languages have garbage collectors (GCs) that will automatically manage memory for you, you just need to program at a high level without considering the details. The bad news is that GC is not a cost-free design. No matter how well designed a GC algorithm is, the performance of the code will be degraded to some extent.]]></description>
</item>
<item>
    <title>Vim Macro 101</title>
    <link>https://martinlwx.github.io/vim-macro-101/</link>
    <pubDate>Sat, 02 Jul 2022 10:40:38 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/vim-macro-101/</guid>
    <description><![CDATA[Intro In the process of learning vim, the most enlightening sentence for me is :
vim is a kind of programming language
I once try to learn vim a long time ago. However, the key combination logic is very difficult to remember in my opinion. So I later gave up learning vim and switched to a normal text editor. My view of vim changed when I met this course: Missing semester.]]></description>
</item>
<item>
    <title>How to use the semantic actions to generate the symbol tables in ANTLR4</title>
    <link>https://martinlwx.github.io/how-to-use-antlr4-to-make-semantic-actions/</link>
    <pubDate>Sat, 28 May 2022 21:09:05 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/how-to-use-antlr4-to-make-semantic-actions/</guid>
    <description><![CDATA[What are the semantic actions When the parser processes the input code, it not only determines whether the syntax is correct but also performs some useful actions. These actions are called semantic actions. In fact, it is a piece of code, which is generally embedded in the rules of the grammar file. Then when the parser applies this specific rule, the code you set will be executed. From another perspective, semantic actions are actually &ldquo;triggers&rdquo;, and the trigger condition is that the parser applies the corresponding rules.]]></description>
</item>
<item>
    <title>Boyer-Moore Majority Voting Algorithm Explained</title>
    <link>https://martinlwx.github.io/boyer-moore-majority-voting-algorithm-explained/</link>
    <pubDate>Thu, 24 Mar 2022 18:15:19 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/boyer-moore-majority-voting-algorithm-explained/</guid>
    <description><![CDATA[Intro Today I coded the Leetcode 169. Majority Element again. I vaguely remember what the optimal solution is called Boyer-Moore Majority Voting Algorithm. However, I have no idea what is except for its name. So I plan to systematically learn the principle of this algorithm and summarize it to write this blog. I once heard that:
If you want to master something, teach it :)
So, I&rsquo;m here today to share this algorithm with you, and try to teach you this method in plain language, so let&rsquo;s get started :)]]></description>
</item>
<item>
    <title>Proj3.Ants vs SomeBees of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/proj3.ants-vs-somebees-of-cs61a-of-ucb/</link>
    <pubDate>Thu, 10 Mar 2022 21:43:59 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/proj3.ants-vs-somebees-of-cs61a-of-ucb/</guid>
    <description><![CDATA[Intro I have finished the first two projects - Hog and Cats. The first two projects are relatively simple and uncomplicated. But today, the difficulty of the third project has indeed increased (you can see how complicated this is by looking at the rules of the game). It feels like Plants vs. Zombies
So I&rsquo;m going to write a blog to sort out the ideas when writing code. ðŸ¤—
Phase 1: Basic gameplay Problem 1 (1 pt) Part A: Currently, there is no cost for placing any type of Ant, and so there is no challenge to the game.]]></description>
</item>
<item>
    <title>Lab14 CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/lab14-cs61a-of-ucb/</link>
    <pubDate>Thu, 03 Mar 2022 08:17:14 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/lab14-cs61a-of-ucb/</guid>
    <description><![CDATA[Trees Q1: Prune Min Write a function that prunes a Tree t mutatively. t and its branches always have zero or two branches. For the trees with two branches, reduce the number of branches from two to one by keeping the branch that has the smaller label value. Do nothing with trees with zero branches.
Prune the tree in a direction of your choosing (top down or bottom up). The result should be a linear tree.]]></description>
</item>
<item>
    <title>Hw10 of CS61A of UCB(2021-Fall)</title>
    <link>https://martinlwx.github.io/hw10-of-cs61a-of-ucb/</link>
    <pubDate>Wed, 02 Mar 2022 13:36:13 &#43;0800</pubDate>
    <author>MartinLwx</author>
    <guid>https://martinlwx.github.io/hw10-of-cs61a-of-ucb/</guid>
    <description><![CDATA[BNF Q1: Grouping and Pipes In this question, you will add support for grouping and piping.
Recall that grouping allows for an entire regular expression to be treated as a single unit, and piping allows for a pattern to match an expression on either side. Combined, these will let us create patterns which match multiple strings!
Define the group and pipe expressions in your grammar.
A group consists of any regex expression surrounded by parentheses (()).]]></description>
</item>
</channel>
</rss>
