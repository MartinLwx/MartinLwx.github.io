<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MartinLwx&#39;s blog</title>
    <link>https://martinlwx.github.io/post/</link>
    <description>Recent content in Posts on MartinLwx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Feb 2022 23:03:22 +0800</lastBuildDate><atom:link href="https://martinlwx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hw05 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw05-of-cs61a-of-ucb/</link>
      <pubDate>Tue, 22 Feb 2022 23:03:22 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw05-of-cs61a-of-ucb/</guid>
      <description>Q1: Generate Permutations  Given a sequence of unique elements, a permutation of the sequence is a list containing the elements of the sequence in some arbitrary order. For example, [2, 1, 3], [1, 3, 2], and [3, 2, 1] are some of the permutations of the sequence [1, 2, 3].
Implement gen_perms, a generator function that takes in a sequence seq and returns a generator that yields all permutations of seq.</description>
    </item>
    
    <item>
      <title>Lab06 CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/lab06-cs61a-of-ucb/</link>
      <pubDate>Sun, 20 Feb 2022 21:45:45 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/lab06-cs61a-of-ucb/</guid>
      <description>Mutability   Write a function which takes in a list lst, an argument entry, and another argument elem. This function will check through each item in lst to see if it is equal to entry. Upon finding an item equal to entry, the function should modify the list by placing elem into lst right after the item. At the end of the function, the modified list should be returned.</description>
    </item>
    
    <item>
      <title>Hw04 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw04-of-cs61a-of-ucb/</link>
      <pubDate>Sun, 20 Feb 2022 14:44:19 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw04-of-cs61a-of-ucb/</guid>
      <description>Mobiles  Q2: Weights  Implement the planet data abstraction by completing the planet constructor and the size selector so that a planet is represented using a two-element list where the first element is the string &#39;planet&#39; and the second element is its size.
 From the description, we can know what is planet. It is a [&#39;planet&#39;, size]. Then we can take a look at the mobile function, the solution is quite similar.</description>
    </item>
    
    <item>
      <title>Lab05 CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/lab05-cs61a-of-ucb/</link>
      <pubDate>Sat, 19 Feb 2022 12:26:56 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/lab05-cs61a-of-ucb/</guid>
      <description>Lists  Q1: Factors List  Write factors_list, which takes a number n and returns a list of its factors in ascending order.
 We can know such a basic mathematical fact: the factor of a number can only be up to half of it (when the number is even). So we use for i in range(1, n // 2 + 1)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  def factors_list(n): &amp;#34;&amp;#34;&amp;#34;Return a list containing all the numbers that divide `n` evenly, except for the number itself.</description>
    </item>
    
    <item>
      <title>Lab04 CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/lab04-cs61a-of-ucb/</link>
      <pubDate>Thu, 03 Feb 2022 15:24:28 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/lab04-cs61a-of-ucb/</guid>
      <description>Intro  I find it really interesting to solve recursive problems. I like this way of solving problems, the code is concise and intuitive, which is why I wrote this blog.
 📒 How to solve a recursive problem ?
 What is the base case ? How to break down the current problem into simpler ones ?   Later, I will follow this idea to solve the recursion problem in this lab.</description>
    </item>
    
    <item>
      <title>Proj0.2048 of CS61B(2021-Spring)</title>
      <link>https://martinlwx.github.io/post/proj0.2048-of-cs61b/</link>
      <pubDate>Sun, 30 Jan 2022 20:28:13 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/proj0.2048-of-cs61b/</guid>
      <description>Intro  In this assignment, we need to cope with four tasks. I will talk about these solutions in detail.
Task 1. public static boolean emptySpaceExists(Board b)  Task 1 asks us for checking if any of the tiles in the given board are null. The solution is to the problem is quite simple. All we need to do is iterating all tiles in the board. By using board.tile(col, row), we can easily get the state of the corresponding tile.</description>
    </item>
    
    <item>
      <title>Hw03 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw03-of-cs61a-of-ucb/</link>
      <pubDate>Mon, 24 Jan 2022 11:04:10 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw03-of-cs61a-of-ucb/</guid>
      <description>hw03. Recursion, Tree Recursion  Q1: Num eights  Write a recursive function num_eights that takes a positive integer pos and returns the number of times the digit 8 appears in pos.
Important: Use recursion; the tests will fail if you use any assignment statements. (You can however use function definitions if you so wish.)
 It is easy to think of the answer to this question, for we have seen a similar one in lecture.</description>
    </item>
    
    <item>
      <title>How to Manage Windows Using Hammerspoon</title>
      <link>https://martinlwx.github.io/post/how-to-manage-windows-using-hammerspoon/</link>
      <pubDate>Fri, 21 Jan 2022 21:45:21 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-manage-windows-using-hammerspoon/</guid>
      <description>Intro  I found that the windows management built in macOS is difficult to use. As a result, I always using my mouse to move and resize my window, which is less efficient. We should keep our hands on the keyboard as much as possible. After finishing the MIT-Missing-Semester, I came across the hammerspoon tool. I really like this one :)
What is hammerspoon ?  According to the official site&amp;rsquo;s introduction, hammerspoon is a tool for powerful automation of OS X, which is just a bridge between the operating system and a Lua scripting engine.</description>
    </item>
    
    <item>
      <title>Hw00 of CS61B of UCB(2021-Spring)</title>
      <link>https://martinlwx.github.io/post/hw00-of-cs61b-of-ucb/</link>
      <pubDate>Fri, 21 Jan 2022 11:00:06 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw00-of-cs61b-of-ucb/</guid>
      <description>Hw00.fdf  Creative Exercise 1a: DrawTriangle  Your goal is to create a program that prints the following figure. Your code should use loops (i.e. shouldn’t just be five print statements, that’s no fun).
1 2 3 4 5  * ** *** **** *****    If you observe carefully, you can find that we need to print five lines in total(outside loop), and the number of each line depends on which line the current line is(inner loop).</description>
    </item>
    
    <item>
      <title>Hw02 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw02-of-cs61a-of-ucb/</link>
      <pubDate>Thu, 20 Jan 2022 17:18:13 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw02-of-cs61a-of-ucb/</guid>
      <description>hw02. Higher Order Functions  Q1: Product  The summation(n, term) function from the higher-order functions lecture adds up term(1) + ... + term(n). Write a similar function called product that returns term(1) * ... * term(n).
 This problem is quite easy, we just need to use * instead of +. The logic is similar to summation(n, term) function in the lecture.
Remember to set ans = 1 at first, after all, 0 * any numbers is always equal to 0 🤗</description>
    </item>
    
    <item>
      <title>Hw01 of CS61A of UCB(2021-Fall)</title>
      <link>https://martinlwx.github.io/post/hw01-of-cs61a-of-ucb/</link>
      <pubDate>Tue, 18 Jan 2022 15:49:29 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/hw01-of-cs61a-of-ucb/</guid>
      <description>hw01. Control  Q1. Welcome Forms Skip :)
Q2. A Plus Abs B  Fill in the blanks in the following function for adding a to the absolute value of b, without calling abs. You may not modify any of the provided code other than the two blanks.
 This problem is easy if we know that we can bind names to functions. In this problem:
 When b &amp;lt; 0, a + abs(b) = a - b, so we should use sub When b &amp;gt; 0, a + abs(b) = a + b, so we should use add  1 2 3 4 5 6 7 8 9 10 11 12 13  def a_plus_abs_b(a, b): &amp;#34;&amp;#34;&amp;#34;Return a+abs(b), but without calling abs.</description>
    </item>
    
    <item>
      <title>the solutions for exercise09 of Missingsemester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise09-missingsemester-2020/</link>
      <pubDate>Mon, 10 Jan 2022 01:16:32 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise09-missingsemester-2020/</guid>
      <description>Lecture 09. Security and Cryptography  Entropy  Suppose a password is chosen as a concatenation of four lower-case dictionary words, where each word is selected uniformly at random from a dictionary of size 100,000. An example of such a password is correcthorsebatterystaple. How many bits of entropy does this have?
 In order to calculate the bits of entropy, we need to know how many possibilites there.
We can easily know the combinations count are $100000^4$ and the bits of entropy are $log_2 (100000^4)\approx 66\ bit$ 🤗</description>
    </item>
    
    <item>
      <title>the solutions for exercise08 of Missingsemester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise08-missingsemester-2020/</link>
      <pubDate>Sat, 08 Jan 2022 20:01:11 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise08-missingsemester-2020/</guid>
      <description>Lecture 08. Metaprogramming   Most makefiles provide a target called clean. This isn’t intended to produce a file called clean, but instead to clean up any files that can be re-built by make. Think of it as a way to “undo” all of the build steps. Implement a clean target for the paper.pdf Makefile above. You will have to make the target phony. You may find the git ls-filessubcommand useful.</description>
    </item>
    
    <item>
      <title>How to Use Logging in Python</title>
      <link>https://martinlwx.github.io/post/how-to-use-logging-in-python/</link>
      <pubDate>Fri, 07 Jan 2022 23:32:50 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-use-logging-in-python/</guid>
      <description>Intro  Recently I was fine-tuning my deep learning model, and I habitually started to use print to print some key information on the terminal. So my workflow is like:
 I type some hyperparameters to train my model. I manually opened an Excel to record the hyperparameters used and the model evaluation results. And I will go back to step 1. If I am not satisfied with results.  Soon, I became bored with this workflow (In fact, I kept this for quite a long time.</description>
    </item>
    
    <item>
      <title>怎么在 homebrew 里面安装本地安装包</title>
      <link>https://martinlwx.github.io/post/how-to-use-local-file-in-homebrew/</link>
      <pubDate>Tue, 04 Jan 2022 18:55:30 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-use-local-file-in-homebrew/</guid>
      <description>引言 最近想要在 homebrew 上面下载 qbittorent, 发现我即使用的是中科大的源也下载不下来, 终端显示如下内容⬇️ 1 2 3 4 ==&amp;gt; Downloading https://downloads.sourceforge.net/qbittorrent/qbittorrent-mac/qbittorrent-4.3.9/qbittorrent-4.3.9.dmg curl: (35) error:06FFF089:digital envelope routines:CRYPTO_internal:bad key length=# # # Error: Download failed on Cask &amp;#39;qbittorrent&amp;#39; with message: Download failed: https://downloads.sourceforge.net/qbittorrent/qbittorrent-mac/qbittorrent-4.3.9/qbittorrent-4.3.9.dmg</description>
    </item>
    
    <item>
      <title>the solutions for exercise07 of Missingsemester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise07-missingsemester-2020/</link>
      <pubDate>Mon, 03 Jan 2022 01:09:06 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise07-missingsemester-2020/</guid>
      <description>debugging  Use journalctl on Linux or log show on macOS to get the super user accesses and commands in the last day. If there aren’t any you can execute some harmless commands such as sudo ls and check again.
 When I run log show --last 1d, it keeps running for along time. I don&amp;rsquo;t know how long it make take, so I will just execute harmless sudo ls to check the log.</description>
    </item>
    
    <item>
      <title>怎么 debug 一个 Python 文件</title>
      <link>https://martinlwx.github.io/post/how-to-debug-in-python/</link>
      <pubDate>Tue, 28 Dec 2021 11:19:00 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-debug-in-python/</guid>
      <description>引言 很长一段时间内我写代码都是用最简单的 debug 方法, 手动在程序里面插入 print 代码来看具体的变量的值, 然后自己推断程序到底是在哪里出问题. 根据 print 的结果</description>
    </item>
    
    <item>
      <title>the solutions for exercise 05&amp;06 of MIT.Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise05-06-missingsemester-2020/</link>
      <pubDate>Mon, 27 Dec 2021 14:28:33 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise05-06-missingsemester-2020/</guid>
      <description>Lecture05. Command-line Environment  Job control  From what we have seen, we can use some ps aux | grep commands to get our jobs’ pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg. Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 03&amp;04 of MIT.Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise03-04-missingsemester-2020/</link>
      <pubDate>Sun, 26 Dec 2021 00:19:54 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise03-04-missingsemester-2020/</guid>
      <description>Lecture 03. Editors (Vim)  Complete vimtutor. Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window.
 It is a tutorial for beginners of vim. I will just put some notes which are not mentioned in course here.
  U command: When we press u in normal mode, we can undo the last command. What U does is fixing a whole line.
  Ctrl + G: show your location in the file and the file status.</description>
    </item>
    
    <item>
      <title>How to draw a simple relation graph in Python</title>
      <link>https://martinlwx.github.io/post/how-to-draw-a-simple-relation-graph-in-python/</link>
      <pubDate>Sat, 25 Dec 2021 10:21:15 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-draw-a-simple-relation-graph-in-python/</guid>
      <description>Intro  The process of drawing a simple relation graph in python can be broken down into 2 steps.
 Define a graph. Draw a graph.  Step 1. Define a graph  In this step, we will use the networkx package.
Install tutorial If you are using conda, you can just type conda install networkx
If you are using pip, you can just type pip install networkx
Nodes First of all, you need to create a graph.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 01&amp;02 of MIT. Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise01-02-missingsemester-2020/</link>
      <pubDate>Sat, 18 Dec 2021 10:11:22 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise01-02-missingsemester-2020/</guid>
      <description>Lecture 01. Shell   Create a new directory called missing under /tmp
 1  &amp;gt; mkdir -p /tmp/missing   📒 -p means Create intermediate directories as required
 Use touch to create a new file called semester in missing.
 1 2  &amp;gt; cd ~/tmp/missing &amp;gt; touch semester    Write the following into that file, one line at a time:
1 2  #!/bin/sh curl --head --silent https://missing.</description>
    </item>
    
    <item>
      <title>git lfs 使用指南</title>
      <link>https://martinlwx.github.io/post/gitlfs/</link>
      <pubDate>Mon, 06 Dec 2021 10:14:54 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/gitlfs/</guid>
      <description>什么是 git-lfs Github 对文件大小的限制 如果你在命令行用 git push &amp;gt; 50 MB 的文件，你会收到一个 warning，但是你仍然可以正常 push，但是 &amp;gt; 100 MB 的时候就无法 push</description>
    </item>
    
    <item>
      <title>从混淆矩阵到 F1 score</title>
      <link>https://martinlwx.github.io/post/f1score/</link>
      <pubDate>Sun, 05 Dec 2021 21:25:19 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/f1score/</guid>
      <description>什么是混淆矩阵 每一列表示实际情况，每一行表示我们的预测，这样组合起来就得到了一个混淆矩阵，比如一个二分类的任务，可以画出如下的混淆矩阵⬇️ Positive</description>
    </item>
    
  </channel>
</rss>
