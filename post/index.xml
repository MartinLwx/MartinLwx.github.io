<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MartinLwx&#39;s blog</title>
    <link>https://martinlwx.github.io/post/</link>
    <description>Recent content in Posts on MartinLwx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Jan 2022 01:09:06 +0800</lastBuildDate><atom:link href="https://martinlwx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>the solutions for exercise07 of Missingsemester 2020</title>
      <link>https://martinlwx.github.io/post/exercise07-missingsemester-2020/</link>
      <pubDate>Mon, 03 Jan 2022 01:09:06 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise07-missingsemester-2020/</guid>
      <description>debugging  Use journalctl on Linux or log show on macOS to get the super user accesses and commands in the last day. If there aren’t any you can execute some harmless commands such as sudo ls and check again.
 When I run log show --last 1d, it keeps running for along time. I don&amp;rsquo;t know how long it make take, so I will just execute harmless sudo ls to check the log.</description>
    </item>
    
    <item>
      <title>怎么 debug 一个 Python 文件</title>
      <link>https://martinlwx.github.io/post/how-to-debug-in-python/</link>
      <pubDate>Tue, 28 Dec 2021 11:19:00 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-debug-in-python/</guid>
      <description>引言 很长一段时间内我写代码都是用最简单的 debug 方法, 手动在程序里面插入 print 代码来看具体的变量的值, 然后自己推断程序到底是在哪里出问题. 根据 print 的结果</description>
    </item>
    
    <item>
      <title>the solutions for exercise 05&amp;06 of MIT.Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise05-06-missingsemester-2020/</link>
      <pubDate>Mon, 27 Dec 2021 14:28:33 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise05-06-missingsemester-2020/</guid>
      <description>Lecture05. Command-line Environment  Job control  From what we have seen, we can use some ps aux | grep commands to get our jobs’ pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg. Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 03&amp;04 of MIT.Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise03-04-missingsemester-2020/</link>
      <pubDate>Sun, 26 Dec 2021 00:19:54 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise03-04-missingsemester-2020/</guid>
      <description>Lecture 03. Editors (Vim)  Complete vimtutor. Note: it looks best in a 80x24 (80 columns by 24 lines) terminal window.
 It is a tutorial for beginners of vim. I will just put some notes which are not mentioned in course here.
  U command: When we press u in normal mode, we can undo the last command. What U does is fixing a whole line.
  Ctrl + G: show your location in the file and the file status.</description>
    </item>
    
    <item>
      <title>How to draw a simple relation graph in Python</title>
      <link>https://martinlwx.github.io/post/how-to-draw-a-simple-relation-graph-in-python/</link>
      <pubDate>Sat, 25 Dec 2021 10:21:15 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/how-to-draw-a-simple-relation-graph-in-python/</guid>
      <description>Intro  The process of drawing a simple relation graph in python can be broken down into 2 steps.
 Define a graph. Draw a graph.  Step 1. Define a graph  In this step, we will use the networkx package.
Install tutorial If you are using conda, you can just type conda install networkx
If you are using pip, you can just type pip install networkx
Nodes First of all, you need to create a graph.</description>
    </item>
    
    <item>
      <title>the solutions for exercise 01&amp;02 of MIT. Missing-semester(2020)</title>
      <link>https://martinlwx.github.io/post/exercise01-02-missingsemester-2020/</link>
      <pubDate>Sat, 18 Dec 2021 10:11:22 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/exercise01-02-missingsemester-2020/</guid>
      <description>Lecture 01. Shell   Create a new directory called missing under /tmp
 1  &amp;gt; mkdir -p /tmp/missing   📒 -p means Create intermediate directories as required
 Use touch to create a new file called semester in missing.
 1 2  &amp;gt; cd ~/tmp/missing &amp;gt; touch semester    Write the following into that file, one line at a time:
1 2  #!/bin/sh curl --head --silent https://missing.</description>
    </item>
    
    <item>
      <title>git lfs 使用指南</title>
      <link>https://martinlwx.github.io/post/gitlfs/</link>
      <pubDate>Mon, 06 Dec 2021 10:14:54 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/gitlfs/</guid>
      <description>什么是 git-lfs Github 对文件大小的限制 如果你在命令行用 git push &amp;gt; 50 MB 的文件，你会收到一个 warning，但是你仍然可以正常 push，但是 &amp;gt; 100 MB 的时候就无法 push</description>
    </item>
    
    <item>
      <title>从混淆矩阵到 F1 score</title>
      <link>https://martinlwx.github.io/post/f1score/</link>
      <pubDate>Sun, 05 Dec 2021 21:25:19 +0800</pubDate>
      
      <guid>https://martinlwx.github.io/post/f1score/</guid>
      <description>什么是混淆矩阵 每一列表示实际情况，每一行表示我们的预测，这样组合起来就得到了一个混淆矩阵，比如一个二分类的任务，可以画出如下的混淆矩阵⬇️ Positive</description>
    </item>
    
  </channel>
</rss>
